#!/bin/bash

# This scripts does the following..
#	1. calls the `cf buildpack-usage` plugin in verbose mode and gets list of all apps
#	2. iterates through the apps list and generates messages in the Statsd format
#	3. generated messages are piped to the Statsd port on graphite using the `netcat` utility.
# 
# This script would be setup as a cron job.
#
# Statsd format: (identified by running the graphite nozzle in debug mode)  
#	&{ops.rep.CapacityTotalMemory 16048}
#	&{ops.rep.CapacityTotalDisk 48576}
#	&{ops.rep.CapacityTotalContainers 250}
#	&{ops.rep.CapacityRemainingMemory 13464}
#	&{ops.rep.CapacityRemainingDisk 45992}
#	&{ops.rep.CapacityRemainingContainers 199}

#
#
# Splunk format:
#
#

tag=$1;
dataCenter=$2;
ipAddr=$3;
port=$4;


# original IFS
OIFS=$IFS;
OOFS=$OFS;

# filename
filename="apps_lst.csv";

whatsMyTarget() {
	echo "";
	echo "$(cf target)";
}

getDetails() {
	echo "";
	echo "$(cf buildpack-usage --verbose | egrep -v '^Following|^$' > ${filename})";
}

send2Statsd() {
	local event=$1;
	local metric=$2;
	local ipAddr=$3;
	local port=$4;
	dtm=$(date +%s);
	# echo "${event}:${metric}|c ${dtm}";
	# echo "${event}:${metric}|c ${dtm}" | nc -u -w0 ${ipAddr} ${port};
	echo "${event}:${metric}|c";
	echo "${event}:${metric}|c" | nc -u -w0 ${ipAddr} ${port};
}

send2Splunk() {
	local event=$1;
	local metric=$2;
	local ipAddr=$3;
	local port=$4;
	echo "&{${event} ${metric}";
	#	echo "&{${event}:${metric}|c ${dtm}}" | nc -u -w0 ${ipAddr} ${port};
}


# main block
# ----------------

# where am I targeted?
whatsMyTarget;
if [ $? -eq 0 ]
then
	echo "";
	echo "	... target is set. ";
else
	echo "";
	echo "	CF target is not set, or the login has expired! "
	echo "	Please login with `cf login -a <target> -u admin` ";
	echo "";
	exit 1;
fi;

echo "	... get the app details";
getDetails;
echo "	... details file - ${filename}";

# reset the IFS
IFS=$OIFS;

for i in `cat ${filename} | sed 's/ MB//g'`;
do

	# change the input file separator
	IFS=',';

	# parse the line into an array
	aline=($i);

	echo "";

	if [ ${aline[0]} == 'ORG' ]
	then
		hdrs=("${aline[@]}")
		# iterate the hdrs array and print label
		for ((i=0; i<${#hdrs[@]}; ++i));
		do
			echo "label $i: ${hdrs[$i]}";
		done
	else 
		echo "	app: ${aline[2]}";
		# echo "${event}:${metric}|c ${dtm}" | nc -u -w0 ${ipAddr} ${port};
		send2Statsd "${tag}.${dataCenter}.${aline[0]}.${aline[1]}.${aline[2]}.${hdrs[3]}" "${aline[3]}" "${ipAddr}" "${port}";
		send2Statsd "${tag}.${dataCenter}.${aline[0]}.${aline[1]}.${aline[2]}.${hdrs[4]}" "${aline[4]}" "${ipAddr}" "${port}";
		send2Statsd "${tag}.${dataCenter}.${aline[0]}.${aline[1]}.${aline[2]}.${hdrs[5]}" "${aline[5]}" "${ipAddr}" "${port}";
		send2Statsd "${tag}.${dataCenter}.${aline[0]}.${aline[1]}.${aline[2]}.${hdrs[6]}" "${aline[6]}" "${ipAddr}" "${port}";
	fi;
done;

# reset back the FS;
IFS=$OIFS;
OFS=$OOFS;

echo "	Done!!! ";
